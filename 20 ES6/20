ECMASCRIPT 6 (2015) - http://es6-features.org
  Некоторые важные нюансы:
    - На данный момент уже существуют стандарты ES7, ES8, ES9 и ES10, но отличия их от 6-ой версии и друг от друга не
      столь колоссальны, как отличия 5-ой версии от 6-ой
    - Область видимости теперь может ограничиваться через {}
  Переменные const и let:
    - https://learn.javascript.ru/let-const
    - Правила, применяемые для let, применимы и к const
    - Для массивов, объектов, функций и DOM-объектов лучше использовать const
  Шаблонные строки:
    - См. Template Literals -> String Interpolation
    - Вместо переменных можно вставлять выражения или даже вызовы функций
    - Переносы строк осуществляются при помощи переноса строки непосредственно в коде, без символа \n
  Установка параметров функции по-умолчанию:
    - См. Extended Parameter Handling -> Default Parameter Values
    - Значение по-умолчанию устанавливается тогда, когда значение параметра undefined или он попросту не передан
    - В качестве значений по-умолчанию могут выступать также выражения и даже вызовы других функций
  Деструктурирующее присваивание:
    - См. примеры
    - Чтобы посмотреть аналоги на ES5 - см. Destructuring Assignment

  Spread/Rest:
    Rest параметр:
      - Собирает параметры или элементы в массив
      - Всегда записывается последним

      В контексте функции:
        - См. Extended Parameter Handling -> Rest Parameter
        - Используется при получении параметров в функцию
        - Практический пример - функция resetForm в ДЗ с шахматами

      При использовании с деструктуризацией:
        - https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment

    Spread оператор:
      В контексте функции, при работе с массивом или строкой:
        - См. Extended Parameter Handling -> Spread Operator
        - Разбивает массив на отдельные параметры или элементы
        - При работе с функцией используется при ее вызове
        - Может являться своего рода заменой метода массивов concat() или метода строк split()
        - Не обязательно записывается последним

    Доп. инфо:
      Данные операции могут использоваться при работе с объектами

  Стрелочные функции:
    - См. примеры
    - Не являются заменой обычных функций
    - Чтобы посмотреть аналоги на ES5 - см. Arrow Functions
  Объект Math:
    - Метод Math.pow() сокращается до **
  Класс Number:
    - Метод Number.isInteger() - для определения, является ли число целым, возвращает булеан
    - Метод Number.isNaN() вместо isNaN() - работает теперь корректно с не пустыми строками (вернет false)
  Класс String:
    - Метод Repeat() - см. New Built-In Methods -> String Repeating
    - Методы для поиска в строке - см. примеры
  Класс Array (ES7):
    - Метод Includes() - см. пример
    - Цикл For of - см. пример
  Класс Object:
    Сокращение свойств:
      - См. Enhanced Object Properties -> Property Shorthand
    Сокращение методов:
      - См. Enhanced Object Properties -> Method Properties
      - Такой синтаксис не является ни обычной, ни стрелочной функцией, используется только в объектах и классах
    Динамические ключи:
      - См. Enhanced Object Properties -> Computed Property Names
    Метод Assign():
      - Cм. New Built-In Methods -> Object Property Assignment
      - Работает примерно как метод массивов concat()
      - Создается полная копия данных из объектов, но с несколькими особенностями:
        - Для простых значений из объектов в итоговом объекте создаются копии
        - На сложные значения из объектов в итоговом объекте создаются только ссылки
        - Прототипы не копируются
      - Если первым параметром передать пустой объект - последующие объекты будут объединяться в новый, а не добавляться
        к уже имеющемуся, в таком случае результат работы метода будет уместно сохранить в переменную
  Классы:
    - Объявление класса через class, constructor(), методы и их вызов - см. Classes -> Class Definition
    - Поскольку данные классы являются аналогом прототипного стиля - приватных свойств и методов в них нет, есть защищенные
    - Наследование класса через extends и super() - см. Classes -> Class Inheritance
    - В новых классах constructor можно не писать, если он не нужен, также его можно опускать и в дочерних классах при
      наследовании, если не требуется расширение конструктора
    - Расширение метода родителя через super() (вызов родительского супер-класса) - см. Classes -> Base Class Access
    - Статические методы класса через static - см. Classes -> Static Members
    - Геттеры-сеттеры - см. Classes -> Getter/Setter

ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ *
  - Babel - это JavaScript-компилятор из версий ES6+ в ES5
  - Книга Kyle Simpson - ES6 & Beyond - см. материалы

ДОМАШНЕЕ ЗАДАНИЕ
  Задание 1:
    Скинуть идею итогового проекта и краткое описание его функционала.

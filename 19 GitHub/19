GIT
  Инструкция:
    - Принять запрос на участие в проекте на github.com (если нет уведомления в аккаунте - искать в почте)
    - Установить программу GitKraken
    - Залогиниться в ней через GitHub
    - Склонировать репозиторий по https-урлу
    - Создать свою ветку, ответвившись от main:
      - Правый клик мыши на main -> Create branch here
      - Имя ветки должно быть формата - A.Lobatch_Homework-1 (почему надо соблюдать формат)
    - Для первого коммита создать локально папку со своим именем формата - Alesya_Lobatch
    - Добавить в неё папку с названием формата - Homework-1 и поместить в нее любой файлик
    - Создать коммит:
      - Выполнить Stage - аналог git add . (можно удобно удалять новые файлы перед пушем)
      - Заголовок сообщения - Homework 1, пояснение - Add homework/Fix styles
      - Выполнить Сommit - аналог git commit
    - Запушить локальную ветку вместе с коммитом
    - Забыли что-то добавить в коммит - можно делать и когда коммит уже был запушен, и до:
      - Внести изменения в файлы
      - Stage (можно увидеть содержимое изменений и отредактировать)
      - Выделить галочку Ammend *
      - Ammend (локальная и удаленная ветки разошлись - значки)
      - Force Push - если коммит уже был запушен
    - Открыть свой аккаунт на github.com и перейти на страницу репозитория
    - Создать Pull Request *:
      - Убедиться что запрос создается от вашей ветки в main
      - Название PR формата - Alesya Lobatch - Homework 1
      - Назначить ревьюером аккаунт IT-Academy-Front-Team
      - Назначить Assignee самого себя
      - Важно - PR создается тогда, когда есть уверенность в том, что работа над заданием максимально завершена, однако
        если есть острая необходимость добавить hotfix, можно подпушиться до начала код-ревью - изменения из вашей
        ветки добавятся в PR автоматически
    - Посмотреть комментарии по Review
    - Если они имеются:
      - Внести правки локально
      - Перепушить их
      - (!!!) Не нажимать Resolve conversation под комментариями
      - Запросить ревью заново - Re-request review на github.com
      - Написать преподавателю что перепушились
    - Если получен незачет - PR закрывается преподавателем, удаленная ветка удаляется, поэтому дубликат ДЗ должен храниться
      дополнительно в вашем аккаунте
    - После того как домашнее задание полностью доработано:
      - PR мержится * в main учителем
      - Ваша ветка, находящаяся удаленно - удаляется учителем
      - Вам нужно удалить локальную версию ветки:
        - Переключиться на локальную ветку main - двойной клик мыши на main или правый клик мыши на main -> Checkout * main
        - При необходимости выполнить Pull -> Fetch All (обычно происходит автоматически в программе)
        - Удалить свою локальную ветку - правый клик мыши на ветку -> Delete (имя ветки)
        - Обновить ветку main, выполнив Pull (rebase)

    Статусы домашнего задания:
      - "Changes requested" - запрошены правки
      - "Approved" - зачет
      - "Closed" - незачет

    В последующие разы:
      - Заново создаем свою ветку для каждого нового ДЗ (для одного и того же - ветку не создаем, только пушим коммиты);
        ветку также можно создавать непосредственно перед пушем
      - Папку с именем заново создавать не надо, она уже есть в ветке main
      - Создаем папку Homework-*
      - Вносим изменения
      - Уже непосредственно ПЕРЕД пушем, если видите, что main обновился (удаленный значок не совпадает с локальным,
        ветки "разошлись") пока вы делали задание, необходимо:
        - Выполнить Stash * своих изменений
        - Переключиться на локальную ветку main
        - Выполнить Pull -> Fetch All * (необязательно)
        - Выполнить Pull -> Pull (rebase) *

        - Переключиться назад на свою локальную ветку
        - Правый клик мыши на main -> Rebase (ваша ветка) onto main * (нарисовать схему)
          ЛИБО
        - Перетянуть свою локальную ветку на ветку main
        - Выбрать опцию Rebase (ваша ветка) onto main *
        
        - Правый клик мыши на stash (WIP) -> Apply Stash
        - Стэш можно удалить
      - Запушить коммит
      - Сделать PR
      - Сохранять дубликаты ДЗ в свой Github

    Терминология:
      - Checkout - переключение на какую-либо ветку
      - Stash - временное "прятание" своих изменений, как правило используется при обновлении веток или для локального
        фиксирования этапов разработки; удаленный стэш можно восстановить
      - Ammend - добавление изменений в уже существующий коммит, стоит применять, если забыли что-то добавить в коммит
        или заметили, что запушили лишнее, но для правок стоит создавать новый коммит
      - Pull Fetch - подтягивание с сервера всех актуальных веток, не затрагивая текущую
      - Pull Rebase:
        - Обновление состояния текущей ветки
        - Если ребэйзим ветку на ветку - "передвигание" нашей ветки вверх до последнего актуального коммита той ветки,
          от которой ответвились
      - Merge - слияние любых двух веток
      - Merge Conflict - возникает, как правило, в том случае, когда при обновлении своей ветки или слиянии веток работа
        велась в одних и тех же файлах и строках и git не смог определить самостоятельно, какие изменения
        оставлять - см. скрин. В GitKraken есть свой собственный удобный инструмент для разрешения
        мерж-конфликтов - см. скрин + https://www.youtube.com/watch?v=R1iWJNyRpQE
      - Reset:
        - "Откатывание" назад до определенного коммита
        - Используется чаще всего, если надо проверить, чей коммит поломал проект
        - Также используется если есть необходимость полностью переделать локальный коммит
        - Правый клик мыши на коммит, до которого нужно "откатиться" -> Reset (ваша ветка) to this commit -> Soft
      - Pull Request - запрос на обновление главной ветки (на разрешение смержить вашу ветку с главной)
      - Git Flow - процесс работы с Git на проекте
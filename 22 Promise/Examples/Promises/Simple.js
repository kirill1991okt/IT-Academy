// Описываем функцию, возвращающую промис
function createFirstPromise(result) {
    // Resolve() - вызывается в случае успешного выполнения промиса, reject() - наоборот
    // Когда делать resolve(), когда reject() - предусматривает сам программист
    // Reject можно опускать
    return new Promise((resolve, reject) => {
        console.log('Промис 1 запущен');

        setTimeout(() => {
            if (result > 0) {
                console.log('Промис 1 решен');

                // Промис завершен успешно
                // Последующий код выполняться не будет
                // Параметр передавать необязательно
                resolve(result);
            }

            // Промис завершен неуспешно
            // Последующий код выполняться не будет
            // Параметр передавать необязательно
            reject('число отрицательное');
        }, 3000);
    });
}

createFirstPromise(5)
    // Выполнится после завершения работы всех операций, находящихся внутри промиса, в случае его успешного окончания
    // В параметр result попадет значение, переданное выше в resolve()
    .then(result => console.log(`Результат промиса 1: ${result}`))
    // Выполнится после завершения работы всех операций, находящихся внутри промиса, в случае его неуспешного окончания
    // В параметр error попадет значение, переданное выше в reject()
    // Данная ветка является опциональной
    .catch(error => console.log(`Возникла ошибка в промисе 1: ${error}`))
    // Выполнится после завершения работы всех операций, находящихся внутри промиса, а также после вызова then() либо catch()
    // Данная ветка является опциональной
    .finally(() => console.log('Работа промиса завершена'));
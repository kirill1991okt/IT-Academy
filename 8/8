GIT
  - Что такое система контроля версий, Git, репозитории, коммиты, пушинг, пуллинг, ветки

  Последовательность действий:
    - Зарегистрировать аккаунт на https://github.com
    - Создать свой первый репозиторий (выбрать public и галочку Initialize this repository with a README)
    - Установить Git на компьютер
    - Открыть cmd

    Инструкция для первого пуша:
      - См. скрины (рассказать коротко о терминологии)
      - В команде push вместо ветки origin master пишем origin main

      Как перейти в свою локальную папку с проектом - команды для работы с cmd или с GitBash:
        d: - перейти на диск D
        dir (ls в MacOS) - показать вложенные директории

        cd .. - подняться на директорию вверх
        cd C:\Users\user\Downloads\Homeworks - перейти на указанный путь
        cd "My Folder" - перейти во внутреннюю директорию с названием My Folder
        cd + нажатие на tab - поиск внутренней директории
        cd + начало ввода имени директории + tab - автоматическая подсказка имени директории

        Клавиша "Вверх" - поиск ранее введенной команды

    Инструкция для последующих пушей:
      - См. скрин

    Что делать, если нужно "откатить коммит":
      - Внести изменения локально
      - Запушить новый коммит

  Доп. инфо:
    - Локальная папка .git должна храниться в корневой папке

    Файлы, позволяющие git игнорировать изменения:
      - .gitignore - создается в корневой папке, предназначен для установки правил всем участникам команды и для
        всего проекта
      - .git\info\exclude - уже существует в папке .git, используется для того, чтобы спрятать от git те изменения
        или файлы, которые не нужно пушить - например, папку .idea или какие-либо вспомогательные файлы, которые не
        требуются всей остальной команде

ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ *
  Возможности и плюсы WebStorm:
    - См. памятку

КОНТЕКСТ И ЕГО УСТАНОВКА
  Контекст this:
    - http://web.archive.org/web/20190405104502/http://learn.javascript.ru/object-methods (до главы "Ссылочный тип")
  Методы для установки контекста:
    - Метод bind - см. скрин
    - Методы call/apply - см. скрины
  Разница между bind и call/apply:
    Bind - только устанавливает контекст и передает параметры, но не вызывает функцию к работе
    Call - устанавливает контекст, передает параметры раздельно и вызывает функцию
    Apply - устанавливает контекст, передает параметры в виде массива и вызывает функцию, в функции параметры
    принимаются по-прежнему как раздельные
  Чем будет являться this в конкретном случае:
    - См. скрин

КЛАСС И ОБЪЕКТ КЛАССА
  - Понятие класса и объекта класса, свойства и методы

  Описание собственного класса и объекта класса:
    - См. скрин
    - Функция-конструктор - фабрика по производству объектов, иначе говоря шаблон
    - Что запишется в объект
    - В this записывается текущий объект класса
    - Фиксированные свойства "хардкодятся", динамические чаще всего получают из параметров функции-конструктора
    - Удаление объектов класса - нет прямого способа, присваивается null

    Доп. инфо:
      - Слайд B.60c - последовательность действий

  Сравнение простого объекта и объекта класса:
    - См. скрины

  Практическое задание 1:
    Создать класс Cat. Добавить ему свойство - name, которое будем получать при создании объекта класса, и пока пустой
    метод feed. Создать объект класса Cat, вывести в консоль его имя и затем удалить объект.
    (Разобрать правила форматирования).

ПРИНЦИПЫ ООП
  Инкапсуляция:
    Это процесс сокрытия части реализации интерфейса от пользователя.
    Например, мы не знаем, как устроен чайник изнутри, но тем не менее имеем простой интерфейс для работы с ним.
  Наследование (нарисовать схему):
    Это возможность наследовать свойства и методы других классов.
    Например, у всех объектов класса "Животные" (супер-класс) есть свойство "количество лап" и метод "покормить животное".
    Класс "Кошки", в свою очередь, может отнаследовать данные свойство и метод, т.к. они присущи и кошкам (при
    наследовании также можно расширять и дополнять метод родителя).
    В то же время у объектов класса "Кошки" могут быть и свои специфичные свойства и методы, например "длина шерсти" и
    "погладить животное".
  Полиморфизм (нарисовать схему):
    Это многообразие форм объекта, передаваемого в метод.
    Например, мы можем вызвать метод "покормить животное". В зависимости от того, какое животное мы туда передадим -
    способ кормления и корм может быть разным, но процесс кормления пройдет успешно, т.к. любое животное, отнаследованное
    от класса "Животные" можно кормить (у любого животного будет такой метод).
  "Утиная" типизация - разновидность полиморфизма в JavaScript (нарисовать схему):
    Если мы передадим в метод "покормить животное" простой объект "Ребенок" -
    процесс кормления также пройдет успешно, поскольку к любому ребенку также можно применить такой метод, даже несмотря
    на то, что ребенок - это не животное. Принцип "утиной" типизации звучит примерно так - "если это выглядит как утка,
    ходит как утка и крякает как утка - значит для нас это утка, и неважно что это на самом деле".

ФУНКЦИОНАЛЬНЫЙ СТИЛЬ ООП
  Публичные и приватные свойства и методы, сохранение контекста:
    - https://learn.javascript.ru/internal-external-interface

    Практическое задание 2:
      Добавить в класс Cat приватное свойство foodAmount, равное 50, и приватный метод formatFoodAmount, который
      будет возвращать это свойство + слово 'гр.'. В методе feed необходимо выводить в консоль информацию вида:
        "Насыпаем в миску (количество гр.) корма."
      "Количество гр." получаем с помощью метода formatFoodAmount.
      Вывести в консоль результат выполнения метода feed.

ДОМАШНЕЕ ЗАДАНИЕ
  Задание 1:
    - Прочитать о Git (Основы и Ветвление в Git) - https://git-scm.com/book/ru/v1/Основы-Git
    - Как оформлять ДЗ в будущем:
      Для всех домашних заданий создать и использовать один репозиторий с названием JS_Homework, настроить в нем
      .gitignore файл
      Для каждого ДЗ - создавать новую папку с названием вида Lesson-3 и т.д.
      В каждой папке должны храниться файлы index.html и main.js, либо только main.js, если задание не требует верстки.
      Коммит-сообщение должно быть вида "Homework 3" и т.д.
      Каждый раз для проверки ДЗ - скидывать преподавателю ссылку на свой github - сразу на нужную папку с заданием.